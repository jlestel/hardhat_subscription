// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// When running the script with `npx hardhat run <script>` you'll find the Hardhat
// Runtime Environment's members available in the global scope.
const hre = require("hardhat");

async function main() {
  // Hardhat always runs the compile task when running scripts with its command
  // line interface.
  //
  // If this script is run directly using `node` you may want to call compile
  // manually to make sure everything is compiled
  // await hre.run('compile');

  const Payment = await hre.ethers.getContractFactory("Payment");
  const payment = await Payment.deploy();
  await payment.deployed();
  console.log(payment.address);

  const Token = await hre.ethers.getContractFactory("MockToken");
  const token = await Token.deploy(); 
  await token.deployed()
  token.attach(payment.address);
  console.log(token.address);

  await payment.createPlan(token.address, 2000, 365, {from: "0x038AfE1F8393b852817129709ffEa6211B12ab8d"});
  await payment.createPlan(token.address, 100, 30, {from: "0x038AfE1F8393b852817129709ffEa6211B12ab8d"});
  const accounts = await hre.ethers.getSigners();
  await token.transfer(accounts[1].address, 10000000000)
  await token.transfer(accounts[2].address, 10000000000)
  await token.transfer(accounts[3].address, 10000000000)
  await token.transfer(accounts[4].address, 10000000000)
  //await payment.createPlan(token.address, 1000, 365, {from: "0x2E5CA01422E48076150B0e7f126ab48E97Ee09Ac"});

  //await token.
  //const params = { to: addr1.address, value: ethers.utils.parseUnits("1", "ether").toHexString()};
  //const txHash = await owner.sendTransaction(params);
  //console.log("transactionHash is " + txHash);  
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
